{"name":"MAD","tagline":"Small and Fast Rebar Replacement","body":"MAD\r\n===\r\n\r\nA simple rebar-compatible dependency manager and developer tool with plugins.\r\n\r\n![MAD](http://synrc.com/images/mad.png)\r\n\r\nGoals\r\n-----\r\n\r\nIt shall:\r\n\r\n* be compatible with rebar configuration.\r\n* be as small and fast as possible.\r\n\r\nFeatures\r\n--------\r\n\r\n* Colorful REPL\r\n* Support rebar.config\r\n* Support OTP releases and directory structure\r\n* Fast deps resolving and cycles detecting\r\n* Fast compilation\r\n* DTL/YECC/LEEX/PORT/SCRIPT/APP/ERL compilation\r\n* BEAM bundles (single-file escriptized app)\r\n* LING bundles (single-file with built-in LING)\r\n* RELX release (relx dependency should be discarded)\r\n* Start/Stop/Attach\r\n* Static files generation with node.js tools\r\n* 9p server for remote access\r\n\r\nBuild\r\n-----\r\n\r\n```sh\r\n    $ make\r\n```\r\n\r\nAnd put `mad` to PATH.\r\n\r\nBEAM Lightweight Unikernel Bundle\r\n---------------------------------\r\n\r\nBundle is a gzipped archive of erlang beams of all dependecies\r\nalong with directory structure of OTP-applications with priv directories.\r\nThis allows you to pack all site inside single portable escript package able\r\nto run under Windows, Linux and Mac. Releases includes all current\r\ndirectory exept sources both code and data with all dependencies. You may think of BEAM \r\nLightweight Unikernel Bundle as of fixed Erlang releases.\r\n\r\n```sh\r\n    $ mad app \"sample\"\r\n    $ cd sample\r\n    $ mad deps compile plan bundle \"web_app\"\r\n    $ ./web_app\r\n```\r\n\r\nLING Unikernel\r\n--------------\r\n\r\nSample rebar.config for your application you want to go unikernel:\r\n\r\n```erlang\r\n{deps_dir,\"deps\"}.\r\n{deps, [{ling, \".*\", {git, \"git://github.com/proger/ling\", {tag, \"osx-again\"}}},\r\n        {sh, \".*\",   {git, \"git://github.com/synrc/sh\",       {tag, \"1.4\"}}}]}.\r\n```\r\n\r\nNow you should build LING/posix:\r\n\r\n```sh\r\n    $ ./mad dep\r\n    $ cd deps/ling\r\n    $ ARCH=posix_x86 make\r\n```\r\n\r\nNow pack vmling.o, your OTP apps and rest static to single-file LING bundle with VM inside.\r\n\r\n```sh\r\n    $ ./mad lin\r\nLing Params: []\r\nARCH: posix_x86\r\nBundle Name: mad\r\nSystem: [compiler,syntax_tools,sasl,tools,mnesia,reltool,xmerl,crypto,kernel,\r\n         stdlib,wx,webtool,ssl,runtime_tools,public_key,observer,inets,asn1,\r\n         et,eunit,hipe,os_mon]\r\nApps: [kernel,stdlib,sh,mad]\r\nOverlay: [\"crypto.beam\",\"9p.beam\",\"9p_auth.beam\",\"9p_info.beam\",\r\n          \"9p_mounter.beam\",\"9p_server.beam\",\"9p_tcp.beam\",\"9p_zero.beam\",\r\n          \"disk.beam\",\"disk_server.beam\",\"embedded_export.beam\",\r\n          \"goo_export.beam\",\"goofs.beam\",\"hipe_unified_loader.beam\",\r\n          \"inet_config.beam\",\"kernel.beam\",\"ling_bifs.beam\",\"ling_code.beam\",\r\n          \"ling_disasm.beam\",\"ling_iops.beam\",\"ling_iopvars.beam\",\r\n          \"ling_lib.beam\",\"net_vif.beam\",\"os.beam\",\"prim_file.beam\",\r\n          \"user_drv.beam\",\"os_mon.beam\",\"dets.beam\",\"filename.beam\",\r\n          \"maps.beam\",\"unicode.beam\",\"zlib.beam\"]\r\nBucks: [{boot,\"/boot\",2},\r\n        {os_mon,\"/erlang/lib/os_mon/ebin\",1},\r\n        {crypto,\"/erlang/lib/crypto/ebin\",1},\r\n        {kernel,\"/erlang/lib/kernel/ebin\",90},\r\n        {stdlib,\"/erlang/lib/stdlib/ebin\",85},\r\n        {sh,\"/erlang/lib/sh/ebin\",6},\r\n        {mad,\"/erlang/lib/mad/ebin\",43}]\r\nInitializing EMBED.FS:\r\nMount View:\r\n /boot /boot\r\n/erlang/lib/os_mon/ebin /os_mon\r\n/erlang/lib/crypto/ebin /crypto\r\n/erlang/lib/kernel/ebin /kernel\r\n/erlang/lib/stdlib/ebin /stdlib\r\n/erlang/lib/sh/ebin /sh\r\n/erlang/lib/mad/ebin /mad\r\nCreating EMBED.FS C file: ...ok\r\nCompilation of Filesystem object: ...ok\r\nLinking Image: ok\r\n```\r\n\r\nRun it:\r\n\r\n```sh\r\n$ rlwrap ./image.img\r\nErlang [ling-0.3.2]\r\n\r\nEshell V6.3  (abort with ^G)\r\n1> application:which_applications().\r\n[{mad,\"MAD VXZ Build Tool\",\"2.2\"},\r\n {sh,\"VXZ SH Executor\",\"0.9\"},\r\n {stdlib,\"ERTS  CXC 138 10\",\"2.2\"},\r\n {kernel,\"ERTS  CXC 138 10\",\"3.0.3\"}]\r\n```\r\n\r\nSee details in [http://maxim.livejournal.com/458016.html](http://maxim.livejournal.com/458016.html) \r\n\r\nBuilding OTP Release\r\n--------------------\r\n\r\nReleases are bundles made by release_handler module of sasl applications.\r\nIt has it own fat bootstripts along with erlang runtime included.\r\nThis allows you to distribute you applications with copy deploy\r\nwithout Erlang prerequisite.\r\n\r\n```sh\r\n    $ mad app sample\r\n    $ cd sample\r\n    $ mad dep com pla release\r\n    $ _rel/sample/bin/sample console\r\n```\r\n\r\nNote: [relx](https://github.com/erlware/relx) must be installed\r\nLINUX NOTE: if you want to have online recompilation you should do at first:\r\n\r\n```sh\r\n    $ sudo apt-get install inotify-tools\r\n```\r\n\r\nSupport\r\n-------\r\n* [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/5HT/n2o?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n* IRC Channel #n2o on FreeNode 24/7\r\n\r\nDocumentation\r\n-------\r\n\r\nIf you are new or need to determine whether the MAD architecture and\r\nphilosophy is a fit for your project\r\n\r\n* Official MAD brochure [PDF](http://synrc.com/apps/mad/doc/book.pdf)\r\n\r\nCredits\r\n-------\r\n\r\n* Maxim Sokhatsky\r\n* Sina Samavati\r\n* Vladimir Kirillov\r\n\r\nOM A HUM\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}